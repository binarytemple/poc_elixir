

```
[/common/elixir_poc%]cd hello
[/common/elixir_poc/hello%]mix test
Compiled lib/hello.ex
Generated hello app
.

Finished in 0.03 seconds (0.03s on load, 0.00s on tests)
1 tests, 0 failures

Randomized with seed 155021
[/common/elixir_poc/hello%]v **/test/*
3 files to edit
[/common/elixir_poc/hello%]mix test

  1) test the truth (HelloTest)
     test/hello_test.exs:4
     Assertion with == failed
     code: 1 + 1 == 3
     lhs:  2
     rhs:  3
     stacktrace:
       test/hello_test.exs:5

Finished in 0.03 seconds (0.02s on load, 0.01s on tests)
1 tests, 1 failures

Randomized with seed 628695

[/common/osmand%]iex
Erlang/OTP 17 [erts-6.4] [source] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

Interactive Elixir (1.0.4) - press Ctrl+C to exit (type h() ENTER for help)
iex(1)> {:ok, agent} = Agent.start_link fn -> [] end
{:ok, #PID<0.60.0>}
iex(2)> Agent.update(agent, fn list -> ["eggs"|list] end)
:ok
iex(3)> Agent.get(agent, fn list -> list end)
["eggs"]
iex(4)> Agent.update(agent, fn list -> ["beans"|list] end)
:ok
iex(5)> Agent.get(agent, fn list -> list end)
["beans", "eggs"]
iex(6)> Agent.update(agent, fn list -> ["cheese"|list] end)
:ok
iex(7)> Agent.get(agent, fn list -> list end)
["cheese", "beans", "eggs"]
iex(8)> Agent.update(agent, fn list -> ["cabage"|list] end)
:ok
iex(9)> Agent.get(agent, fn list -> list end)
["cabage", "cheese", "beans", "eggs"]

iex(10)> List.delete("beans",["beans"])
** (FunctionClauseError) no function clause matching in :lists.delete/2
    (stdlib) lists.erl:370: :lists.delete(["beans"], "beans")
iex(10)> List.delete(["beans"],"beans")
[]
iex(11)> Agent.update(agent, fn list -> List.delete("cabage",[list]
 end)
** (SyntaxError) iex:11: "(" starting at line 11 is missing terminator ")". Unexpected token: end

iex(13)> Agent.update(agent, fn list -> List.delete("cabage",[list]
) end)
** (EXIT from #PID<0.58.0>) an exception was raised:
    ** (FunctionClauseError) no function clause matching in :lists.delete/2
        (stdlib) lists.erl:370: :lists.delete([["cabage", "cheese", "beans", "eggs"]], "cabage")
        (elixir) lib/agent/server.ex:20: Agent.Server.handle_call/3
        (stdlib) gen_server.erl:607: :gen_server.try_handle_call/4
        (stdlib) gen_server.erl:639: :gen_server.handle_msg/5
        (stdlib) proc_lib.erl:237: :proc_lib.init_p_do_apply/3

iex(1)>
16:46:26.791 [error] GenServer #PID<0.60.0> terminating
Last message: {:update, #Function<6.90072148/1 in :erl_eval.expr/5>}
State: ["cabage", "cheese", "beans", "eggs"]
** (exit) an exception was raised:
    ** (FunctionClauseError) no function clause matching in :lists.delete/2
        (stdlib) lists.erl:370: :lists.delete([["cabage", "cheese", "beans", "eggs"]], "cabage")
        (elixir) lib/agent/server.ex:20: Agent.Server.handle_call/3
        (stdlib) gen_server.erl:607: :gen_server.try_handle_call/4
        (stdlib) gen_server.erl:639: :gen_server.handle_msg/5
        (stdlib) proc_lib.erl:237: :proc_lib.init_p_do_apply/3

nil
iex(2)> Agent.update(agent, fn list -> List.delete("cabage",list) e
nd)
** (RuntimeError) undefined function: agent/0

iex(3)> {:ok, agent} = Agent.start_link fn -> [] end
{:ok, #PID<0.80.0>}
iex(4)> Agent.update(agent, fn list -> ["cabage"|list] end)
:ok
iex(5)> Agent.update(agent, fn list -> ["beans"|list] end)
:ok
iex(6)> Agent.update(agent, fn list -> List.delete("cabage",list) end)
** (EXIT from #PID<0.75.0>) an exception was raised:
    ** (FunctionClauseError) no function clause matching in :lists.delete/2
        (stdlib) lists.erl:370: :lists.delete(["beans", "cabage"], "cabage")
        (elixir) lib/agent/server.ex:20: Agent.Server.handle_call/3
        (stdlib) gen_server.erl:607: :gen_server.try_handle_call/4
        (stdlib) gen_server.erl:639: :gen_server.handle_msg/5
        (stdlib) proc_lib.erl:237: :proc_lib.init_p_do_apply/3


16:47:19.609 [error] GenServer #PID<0.80.0> terminating
Last message: {:update, #Function<6.90072148/1 in :erl_eval.expr/5>}
State: ["beans", "cabage"]
** (exit) an exception was raised:
    ** (FunctionClauseError) no function clause matching in :lists.delete/2
        (stdlib) lists.erl:370: :lists.delete(["beans", "cabage"], "cabage")
        (elixir) lib/agent/server.ex:20: Agent.Server.handle_call/3
        (stdlib) gen_server.erl:607: :gen_server.try_handle_call/4
        (stdlib) gen_server.erl:639: :gen_server.handle_msg/5
        (stdlib) proc_lib.erl:237: :proc_lib.init_p_do_apply/3
Interactive Elixir (1.0.4) - press Ctrl+C to exit (type h() ENTER for help)

iex(4)> List.delete(["beans"],"beans")
[]
iex(5)> Agent.update(agent, fn list -> List.delete(list,"cabage") e
nd)
** (RuntimeError) undefined function: agent/0

iex(5)> {:ok, agent} = Agent.start_link fn -> [] end
{:ok, #PID<0.91.0>}
iex(6)> Agent.update(agent, fn list -> List.delete(list,"cabage") end)
:ok
iex(7)> Agent.update(agent, fn list -> ["cabage"|list] end)
:ok
iex(8)> Agent.update(agent, fn list -> ["beans"|list] end)
:ok
iex(9)> Agent.update(agent, fn list -> ["onions"|list] end)
:ok
iex(10)> Agent.update(agent, fn list -> ["farts"|list] end)
:ok
iex(11)> Agent.update(agent, fn list -> List.delete(list,"cabage") end)
:ok
iex(12)> Agent.update(agent, fn list -> List.delete(list,"cabage") end)
:ok
iex(13)> Agent.update(agent, fn list -> List.delete(list,"farts") e
nd)
:ok
iex(14)> Agent.get(agent, fn list -> list end)
["onions", "beans"]
iex(15)>
nil
iex(16)> Agent.update(agent, fn list -> List.delete(list,"beans") e
nd)
:ok
iex(17)> Agent.get(agent, fn list -> list end)
["onions"]

iex(18)> IO.puts("test")
test
:ok
iex(19)> h IO.puts

         def puts(device \\ :erlang.group_leader(), item)

Writes the argument to the device, similar to write/2, but adds a
newline at the end. The argument is expected to be a chardata.

iex(20)> h IO.write

         def write(device \\ :erlang.group_leader(), item)

Writes the given argument to the given device.

By default the device is the standard output. It returns :ok if it
succeeds.

Examples

┃ IO.write "sample"
┃ #=> "sample"
┃
┃ IO.write :stderr, "error"
┃ #=> "error"


iex(21)> h IO.write :stderr,"test"
testCould not load module :ok, got: nofile

iex(23)> h IO.write(:stderr,"test")
testCould not load module :ok, got: nofile
iex(24)> h IO.write("test")
testCould not load module :ok, got: nofile

iex(26)> IO.write(:stderr,"test")
test:ok
iex(27)> IO.write(:stdout,"test")
** (ArgumentError) argument error
    (stdlib) :io.put_chars(:stdout, :unicode, "test")
iex(27)> IO.write(:std ,"test")
BREAK: (a)bort (c)ontinue (p)roc info (i)nfo (l)oaded
       (v)ersion (k)ill (D)b-tables (d)istribution
c

** (ArgumentError) argument error
    (stdlib) :io.put_chars(:std, :unicode, "test")

iex(27)> from IO import *
** (SyntaxError) iex:27: syntax error before: import

iex(27)> from IO import _
** (SyntaxError) iex:27: syntax error before: import

iex(27)> add = fn a, b -> a + b end
#Function<12.90072148/2 in :erl_eval.expr/5>
iex(28)> add(1,2)
** (RuntimeError) undefined function: add/2

iex(28)> add.(1,2)
3
iex(29)> x,y = [1,2|3]
** (SyntaxError) iex:29: syntax error before: ','

iex(29)> [1,2|3]
[1, 2 | 3]
iex(30)> [1,2||3]
[1, 2]
iex(31)> "asdasd" ++ "dsadsdsa"
** (ArgumentError) argument error
    :erlang.++("asdasd", "dsadsdsa")
iex(31)> "asdasd" <> "dsadsdsa"
"asdasddsadsdsa"

iex(32)> "asdasdd" || "dsafasdf"
"asdasdd"

iex(33)> false or error("dsa")
** (RuntimeError) undefined function: error/1

iex(33)> true or error("dsa")
true

iex(35)> Enum.sort([:a,:c,:b])
[:a, :b, :c]

iex(36)> Enum.map(1..3,fn x-> "${x}" end)
["${x}", "${x}", "${x}"]

iex(37)> Enum.map(1..3,fn x-> "{x}" end)
["{x}", "{x}", "{x}"]

iex(38)> Enum.map(1..3,fn x-> "#{x}" end)
["1", "2", "3"]
iex(39)> defmodule LousyCalculator do
...(39)> @typedoc """
...(39)> Just a number followed by a string.
...(39)> """
...(39)> @type number_with_offense :: {number, String.t}
...(39)> @spec add(number, number) :: number_with_offense
...(39)> def add(x, y), do: {x + y, "You need a calculator to do that?!"}
...(39)>   @spec multiply(number, number) :: number_with_offense
...(39)> def multiply(x, y), do: {x * y, "Jeez, come on!"} end
{:module, LousyCalculator,
 <<70, 79, 82, 49, 0, 0, 6, 232, 66, 69, 65, 77, 69, 120, 68, 99, 0, 0, 0, 186, 131, 104, 2, 100, 0, 14, 101, 108, 105, 120, 105, 114, 95, 100, 111, 99, 115, 95, 118, 49, 108, 0, 0, 0, 2, 104, 2, ...>>,
 {:multiply, 2}}

iex(40)> h LousyCalculator.add
LousyCalculator was not compiled with docs

iex(41)> Elixir.IEx.configuration
[colors: [eval_result: [:red, :bright], enabled: true,
  eval_interrupt: [:yellow], eval_error: [:red],
  eval_info: [:normal], stack_app: [:red, :bright],
  stack_info: [:red], ls_directory: [:blue], ls_device: [:green],
  doc_bold: [:bright], doc_code: [:cyan, :bright],
  doc_headings: [:yellow], doc_inline_code: [:cyan],
  doc_table_heading: [:reverse], doc_title: [:reverse, :yellow],
  doc_underline: [:underline]], inspect: [], history_size: 20,
 default_prompt: "%prefix(%counter)>",
 alive_prompt: "%prefix(%node)%counter>"]
iex(42)> Elixir.IEx.configuration
configuration/0

iex(42)> Elixir.IEx.inspect_opts
[width: 80, pretty: true]

iex(44)> LousyCalculator.add(1,1)
{2, "You need a calculator to do that?!"}
iex(45)> case String.split("foo bar") do

iex(48)> add.(1,2)
{:ok, 3}
iex(49)> acc = fn a -> {:ok,a + 1} end
#Function<6.90072148/1 in :erl_eval.expr/5>
iex(50)> def acc(x) do
...(50)> 1 + x
...(50)> end
** (ArgumentError) cannot invoke def/2 outside module
    (elixir) lib/kernel.ex:3563: Kernel.assert_module_scope/3
    (elixir) lib/kernel.ex:2823: Kernel.define/4
    (elixir) expanding macro: Kernel.def/2
             iex:50: (file)
iex(50)> Module Foo do
...(50)>  def acc(x) do
...(50)> 1 + x
...(50)> end
...(50)> end
** (SyntaxError) iex:50: syntax error before: Foo

iex(50)> defmodule Foo do
...(50)>  def acc(x) do
...(50)> 1 + x
...(50)> end
...(50)> end
{:module, Foo,
 <<70, 79, 82, 49, 0, 0, 4, 112, 66, 69, 65, 77, 69, 120, 68, 99, 0, 0, 0, 110, 131, 104, 2, 100, 0, 14, 101, 108, 105, 120, 105, 114, 95, 100, 111, 99, 115, 95, 118, 49, 108, 0, 0, 0, 2, 104, 2, ...>>,
 {:acc, 1}}
iex(51)> defmodule Foo do
...(51)>  def acc(x) do
...(51)> {:ok,1 + x}
...(51)> end
...(51)> end
iex:51: warning: redefining module Foo
{:module, Foo,
 <<70, 79, 82, 49, 0, 0, 4, 136, 66, 69, 65, 77, 69, 120, 68, 99, 0, 0, 0, 110, 131, 104, 2, 100, 0, 14, 101, 108, 105, 120, 105, 114, 95, 100, 111, 99, 115, 95, 118, 49, 108, 0, 0, 0, 2, 104, 2, ...>>,
 {:acc, 1}}
iex(52)> Foo.acc
acc/1
iex(52)> Foo.acc(1) |> Foo.acc
** (ArithmeticError) bad argument in arithmetic expression
    iex:53: Foo.acc/1
iex(52)> 1 |> Foo.acc |> Foo.acc
** (ArithmeticError) bad argument in arithmetic expression
    iex:53: Foo.acc/1
iex(52)> 1 |> Foo.acc() |> Foo.acc()
** (ArithmeticError) bad argument in arithmetic expression
    iex:53: Foo.acc/1
iex(52)> Foo.acc(1) |> Foo.acc()
** (ArithmeticError) bad argument in arithmetic expression
    iex:53: Foo.acc/1
iex(52)> 1..2 |> Foo.acc() |> Foo.acc()
** (ArithmeticError) bad argument in arithmetic expression
    iex:53: Foo.acc/1
iex(52)> 1..2 |> Foo.acc |> Foo.acc
** (ArithmeticError) bad argument in arithmetic expression
    iex:53: Foo.acc/1

```
